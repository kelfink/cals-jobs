buildscript {
    repositories {
        maven {
            url "http://sonar.dev.cwds.io:8081/artifactory/repo"
        }
        jcenter()
    }
}

plugins {
    id 'org.sonarqube' version '2.6'
    id 'com.github.jk1.dependency-license-report' version '0.3.14'
}

apply plugin: 'java'
apply plugin: 'eclipse'

project.ext {
    cwdsModelVersion = '0.8.1_629-RC'
    calsApiVersion = '1.0.1_1365-RC'
    coreApiVersion = '1.7.3_822-RC'
    perryVersion = '3.0.4_853-RC'
    testSupportVersion = '0.5.6_272-RC'
    commonsCliVersion = '1.4'
    commonsLangVersion = '3.6'
    guiceVersion = "4.1.0"
    slf4jVersion = '1.7.25'
    log4jVersion = '2.8.2'
    hibernateVersion = '5.2.8.Final'
    dropwizardVersion = '1.1.0'
    jUnitVersion = '4.12'
    jsonAssertVersion = '1.5.0'

    elasticsearchVersion = "5.5.2"
    dropwizardVersion = "1.1.0"

    projectMajorVersion = "1.1"

    isRelease = System.getProperty("Release") == "true"
    buildNumber = System.getProperty('BuildNumber')
    customVersion = System.getProperty('CustomVersion')

    projectSnapshotVersion = projectMajorVersion + "-SNAPSHOT"
    projectReleaseVersion = (customVersion == null || customVersion == "" || customVersion.startsWith('$') ? projectMajorVersion + '_' + buildNumber + '-RC' : customVersion )
    projectVersion = (isRelease ? projectReleaseVersion : projectSnapshotVersion )

    // Publishing configuration
    snapshotMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/repo"
    releaseMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/libs-release"
    artifactoryRepo = (isRelease ? releaseMavenRepo : snapshotMavenRepo)
    commonGroupId = 'gov.ca.cwds.jobs'
    allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"
}

version = projectVersion
group = commonGroupId

allprojects {
    apply plugin: 'jacoco'
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url artifactoryRepo
        }
    }

    jacoco {
        toolVersion = '0.7.1.201405082137'
    }
}

subprojects {
    apply plugin: 'java'

    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
        testCompile group: 'junit', name: 'junit', version: jUnitVersion
        testCompile 'org.mockito:mockito-core:2.0.54-beta'
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", allTestCoverageFile
        }
    }
}

dependencies {
}

task printProps << {
    println System.properties['DB_CMS_JDBC_URL']
}

task savePropertyFile (){
    Properties props = new Properties()
    File propsFile = new File('jenkins_build.properties')
    props.setProperty('elasticsearchVersion', elasticsearchVersion)
    props.setProperty('projectVersion',projectVersion)
    props.setProperty('artifactoryRepo',artifactoryRepo )
    props.store(propsFile.newWriter(), null)
}

tasks.withType(Test) {
    enableAssertions = true
    systemProperties project.properties.subMap(["DB_CMS_JDBC_URL", "DB_CMS_PASSWORD", "DB_CMS_SCHEMA", "DB_CMS_REP_SCHEMA", "DB_CMS_USER", "DB_NS_JDBC_URL", "DB_NS_PASSWORD", "DB_NS_SCHEMA", "DB_NS_USER"])
}

task libLicenceFolders(type: Copy){
    from 'build/reports/dependency-license'
    into 'legal/licenses'
    exclude "licenses.html"
    exclude "licenses.txt"
}

task libLicenseReportFiles(type: Copy){
    from 'build/reports/dependency-license'
    into 'legal'
    include "licenses.html"
    include "licenses.txt"
}

task libLicenseReport(dependsOn:[generateLicenseReport, libLicenceFolders,
                                 libLicenseReportFiles,savePropertyFile ] ){
}

sonarqube {
  properties {
      property "sonar.projectKey", "cwds.ca.gov:cals-jobs"
      property "sonar.projectName", "cals-jobs"
      property "sonar.jacoco.reportPaths",   allTestCoverageFile
  }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/test.exec')
}

licenseReport {
    renderer = new CWDSReportRenderer()
}

//==================================================================================================
// Custom Groovy classes for Licence Reports.
// Move to own classes outside of build.
import org.gradle.api.Project;
import com.github.jk1.license.License;
import com.github.jk1.license.LicenseReportPlugin;
import com.github.jk1.license.ManifestData;
import com.github.jk1.license.ModuleData;
import com.github.jk1.license.PomData;
import com.github.jk1.license.ProjectData;
import com.github.jk1.license.render.ReportRenderer;

public class CWDSReportRenderer implements ReportRenderer {

    @Override
    void render(ProjectData data) {
        new CWDSTextReportRenderer().render(data)
        new CWDSHtmlReportRenderer().render(data)

    }
}
public class CWDSTextReportRenderer implements ReportRenderer {

  private Project project
  private LicenseReportPlugin.LicenseReportExtension config
  private File output
  private int counter
  private String fileName

  CWDSTextReportRenderer(String filename = 'licenses.txt'){
      this.fileName = filename
  }
  public void render(ProjectData data) {
        project = data.project
        config = project.licenseReport
        output = new File(config.outputDir, fileName)
        output.text = """
================================================================
       Dependency License Report for $project.name ${if (!'unspecified'.equals(project.version))
            project.version else ''}
================================================================
"""
      output << "\n\n"
        printDependencies(data)
        output << """
This report was generated at ${new Date()}.
"""
    }

    private void printDependencies(ProjectData data) {
        data.allDependencies.sort().each {
            printDependency(it)
        }
    }

    private String printDependency(ModuleData data) {
        boolean projectUrlDone = false
        if (data.name) output << "License Name: $data.name "
        if (data.version) output << " Version: $data.version\n\n"

        if (data.poms.isEmpty() && data.manifests.isEmpty()) {
            output << "No license information found\n\n"
            return
        }

        if (!data.manifests.isEmpty() && !data.poms.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            PomData pomData = data.poms.first()
            if (manifest.url && pomData.projectUrl && manifest.url == pomData.projectUrl) {
                output << "Project URL: $manifest.url\n\n"
                projectUrlDone = true
            }
        }

        if (!data.manifests.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            if (manifest.url && !projectUrlDone) {
                output << "Manifest Project URL: $manifest.url\n\n"
            }
            if (manifest.license) {
                if (manifest.license.startsWith("http")) {
                    output << "Manifest license URL: $manifest.license\n\n"
                } else if (manifest.hasPackagedLicense) {
                    output << "Packaged License File: $manifest.license\n\n"
                } else {
                    output << "Manifest License: $manifest.license (Not packaged)\n\n"
                }
            }
        }

        if (!data.poms.isEmpty()) {
            PomData pomData = data.poms.first()
            if (pomData.projectUrl && !projectUrlDone) {
                output << "POM Project URL: $pomData.projectUrl\n\n"
            }
            if (pomData.licenses) {
                pomData.licenses.each { License license ->
                    output << "POM License: $license.name"
                    if (license.url) {
                        if (license.url.startsWith("http")) {
                            output << " - $license.url\n\n"
                        } else {
                            output << "License: $license.url\n\n"
                        }
                    }
                }
            }
        }
        if (!data.licenseFiles.isEmpty() && !data.licenseFiles.first().files.isEmpty()) {
            output << 'Embedded license: '
            output << "\n\n"
            output << data.licenseFiles.first().files.collect({ "                    " +
                    "****************************************\n\n \t\t\t$it\n\n" + new
                    File("$config.outputDir/$it").text + "\n"}).join('')
        }
        output <<
                "\n\n================================================================================\n\n"
    }
}

import com.github.jk1.license.LicenseReportPlugin.LicenseReportExtension
class CWDSHtmlReportRenderer implements ReportRenderer {

    private Project project
    private LicenseReportExtension config
    private File output
    private int counter
    private String fileName
    private String libLicenseUrl

    CWDSHtmlReportRenderer(String libLicenseUrl = "licenses",String fileName = 'licenses.html') {
        this.fileName = fileName
        this.libLicenseUrl = libLicenseUrl
    }

    public void render(ProjectData data) {
        project = data.project
        config = project.licenseReport
        output = new File(config.outputDir, fileName)
        output.text = """
<html>
<head>
<title>Dependency License Report for $project.name</title>
<style>
    table, th, td { border: 1px solid black; }
</style>
<head>
<body>
<h1>Dependency License Report for $project.name ${if (!'unspecified'.equals(project.version)) project.version else ''}</h1>
"""
        printDependencies(data)
        output << """
<hr />
<p id="timestamp">This report was generated at <em>${new Date()}</em>.</p>
</body>
</html>
"""
    }

    private void printDependencies(ProjectData data) {
        output << "<table >"
        output << "<hr><th>name</th><th>project url</th><th>license</th>" +
                       "<th>Embeded License</th></hr>"
        data.allDependencies.sort().each {
            output << "<tr>"
            printDependency(it)
            output << "</tr>"
        }
        output << "</table>"
    }

    private String printDependency(ModuleData data) {
        boolean projectUrlDone = false
        String name = ""
        String urls = ""
        String licenses = ""
        name += "<p><strong> ${++counter}.</strong> "
        if (data.name) name += "$data.name "
        name += "</p>"

        if (data.poms.isEmpty() && data.manifests.isEmpty()) {
            name += "<p><strong>No license information found</strong></p>"
        }

        if (!data.manifests.isEmpty() && !data.poms.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            PomData pomData = data.poms.first()
            if (manifest.url && pomData.projectUrl && manifest.url == pomData.projectUrl) {
                urls += "<p> <code><a href=\"$manifest.url\">$manifest.url</a></code></p>"
                projectUrlDone = true
            }
        }

        if (!data.manifests.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            if (manifest.url && !projectUrlDone) {
                urls += "<p> <code><a href=\"$manifest.url\">$manifest.url</a></code></p>"
            }
            if (manifest.license) {
                if (manifest.license.startsWith("http")) {
                    licenses += "<p><strong>Manifest license URL:</strong> <a href=\"$manifest.license\">$manifest.license</a></p>"
                } else if (manifest.hasPackagedLicense) {
                    licenses += "<p><strong>Manifest license URL:</strong> <a href=\"$manifest.url\">$manifest.license</a></p>"
                } else {
                    licenses += "<p><strong>Manifest license URL:</strong>$manifest.license (Not packaged)</p>"
                }
            }
        }

        if (!data.poms.isEmpty()) {
            PomData pomData = data.poms.first()
            if (pomData.projectUrl && !projectUrlDone) {
                urls += "<p> <code><a href=\"$pomData.projectUrl\">$pomData.projectUrl</a></code></p>"
            }
            if (pomData.licenses) {
                pomData.licenses.each { License license ->
                    licenses += "<p><strong>POM License: $license.name</strong>"
                    if (license.url) {
                        if (license.url.startsWith("http")) {
                            licenses += " - <a href=\"$license.url\">$license.url</a>"
                        } else {
                            licenses += "<p> $license.url</p>"
                        }
                    }
                }
            }
        }

        output << "<td>$name</td>"
        output << "<td>$urls</td>"
        output << "<td>$licenses</td>"

        output << "<td>"
        if (!data.licenseFiles.isEmpty() && !data.licenseFiles.first().files.isEmpty()) {
            output << '<p>'
            output << data.licenseFiles.first().files.collect({ "<a " +
                    "href=\"$libLicenseUrl/$it\">$it</a>" +
                    " " +
                    "" }).join('')
            output << '</p>'
        }
        output << "</td>"
    }
}
